require('dotenv').config();
const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');
const { combineEstadisticas } = require('./externs/getEstadistica');
const { tools } = require('./externs/functions'); // ‚úÖ Importar tools

const app = express();
const port = 80;

app.use(express.json());
app.use(cors({
  origin: '*',
  credentials: true,
}));

const openai = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: process.env.DEEPSEEK_API_KEY,
});

// ‚úÖ NUEVA FUNCI√ìN: Detectar diferentes tipos de consultas
function detectarTipoConsulta(mensaje) {
  const mensajeLower = mensaje.toLowerCase();
  
  const tipos = {
    estadisticas: {
      palabras: [
        'estad√≠stica', 'estadisticas', 'producci√≥n', 'produccion', 'datos', 
        'rendimiento', 'n√∫meros', 'numeros', 'reporte', 'informe', 'm√©tricas', 
        'metricas', 'cifras', 'cantidad', 'cu√°nto', 'cuanto', 'porcentaje', 
        'promedio', 'total', 'resumen', 'an√°lisis', 'analisis', 'registros',
        'mostrar', 'muestra', 'dame', 'ver', 'consultar', 'obtener'
      ],
      requiere_funcion: true
    },
    recomendaciones: {
      palabras: [
        'recomendaci√≥n', 'recomendaciones', 'recomienda', 'recomiendas', 
        'sugieres', 'sugerencia', 'sugerencias', 'consejo', 'consejos',
        'qu√© debo', 'que debo', 'c√≥mo puedo', 'como puedo', 'mejor manera',
        'ayuda', 'ay√∫dame', 'ayudame', 'orientaci√≥n', 'orientacion'
      ],
      requiere_funcion: false
    },
    problemas: {
      palabras: [
        'problema', 'problemas', 'enfermedad', 'enfermedades', 'plaga', 'plagas',
        'varroa', 'nosema', 'loque', 'polilla', 'hormiga', 'hormigas',
        'mueren', 'muertas', 'd√©bil', 'debil', 'd√©biles', 'debiles',
        'no produce', 'baja producci√≥n', 'baja produccion', 'agresivas',
        'pican', 'atacan', 'mal olor', 'huele mal', 'qu√© pasa', 'que pasa'
      ],
      requiere_funcion: false
    },
    cuidados: {
      palabras: [
        'cuidado', 'cuidados', 'mantenimiento', 'revisi√≥n', 'revision',
        'inspecci√≥n', 'inspeccion', 'alimentaci√≥n', 'alimentacion',
        'jarabe', 'polen', 'agua', 'bebedero', 'ventilaci√≥n', 'ventilacion',
        'limpieza', 'desinfecci√≥n', 'desinfeccion', 'temporada', 'estaci√≥n', 'estacion'
      ],
      requiere_funcion: false
    },
    equipos: {
      palabras: [
        'equipo', 'equipos', 'herramienta', 'herramientas', 'colmena', 'colmenas',
        'cuadro', 'cuadros', 'marco', 'marcos', 'alzas', 'alza', 'ahumador',
        'extractor', 'centrifuga', 'overol', 'velo', 'guantes', 'esp√°tula',
        'cepillo', 'material', 'materiales', 'comprar', 'necesito'
      ],
      requiere_funcion: false
    },
    temporadas: {
      palabras: [
        'primavera', 'verano', 'oto√±o', 'otono', 'invierno', 'temporada',
        'estaci√≥n', 'estacion', 'floraci√≥n', 'floracion', 'mielada',
        'cosecha', '√©poca', 'epoca', 'mes', 'cuando', 'cu√°ndo'
      ],
      requiere_funcion: false
    },
    general: {
      palabras: ['hola', 'buenos', 'buenas', 'saludos', 'gracias', 'ayuda'],
      requiere_funcion: false
    }
  };
  
  let tipoDetectado = 'general';
  let maxCoincidencias = 0;
  let requiereFuncion = false;
  
  // Buscar el tipo con m√°s coincidencias
  for (const [tipo, config] of Object.entries(tipos)) {
    const coincidencias = config.palabras.filter(palabra => 
      mensajeLower.includes(palabra)
    ).length;
    
    if (coincidencias > maxCoincidencias) {
      maxCoincidencias = coincidencias;
      tipoDetectado = tipo;
      requiereFuncion = config.requiere_funcion;
    }
  }
  
  console.log(`üêõ DEBUG - Mensaje: "${mensaje}"`);
  console.log(`üêõ DEBUG - Tipo detectado: ${tipoDetectado} (${maxCoincidencias} coincidencias)`);
  console.log(`üêõ DEBUG - Requiere funci√≥n: ${requiereFuncion}`);
  
  return { tipo: tipoDetectado, requiere_funcion: requiereFuncion, coincidencias: maxCoincidencias };
}

// Funci√≥n para eliminar el formato markdown
function eliminarMarkdown(texto) {
  if (!texto) return '';
  
  return texto
    .replace(/\*\*/g, '') // Eliminar negritas
    .replace(/\*/g, '')    // Eliminar cursivas
    .replace(/#{1,6}\s/g, '') // Eliminar encabezados
    .replace(/\n- /g, '\n‚Ä¢ ') // Reemplazar vi√±etas markdown por bullet points simples
    .replace(/```[^`]*```/g, '') // Eliminar bloques de c√≥digo
    .replace(/`([^`]+)`/g, '$1') // Eliminar c√≥digo inline
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1'); // Reemplazar enlaces
}

// ‚úÖ PROMPTS MEJORADOS Y EXPANDIDOS
const SYSTEM_PROMPT_BASE = `Eres Meli üêù, la abeja apicultora m√°s experta y entusiasta de BeeHappy. Tienes a√±os de experiencia trabajando con colmenas y conoces todos los secretos de la apicultura.

PERSONALIDAD Y ESTILO:
‚Ä¢ Eres alegre, conocedora y siempre positiva
‚Ä¢ Usas "¬°Bzzz!" al inicio o durante conversaciones
‚Ä¢ Incluyes emojis relacionados con abejas, miel y flores: üêù üçØ üåª üå∏ üè† üîß ‚ö†Ô∏è üí°
‚Ä¢ Hablas con pasi√≥n sobre la apicultura y el cuidado de las abejas
‚Ä¢ Eres pr√°ctica y das consejos espec√≠ficos y accionables

FORMATO DE RESPUESTA OBLIGATORIO:
‚Ä¢ NUNCA uses markdown (sin **, *, #, -, \`\`\`)
‚Ä¢ Escribe solo texto plano con emojis
‚Ä¢ Estructura tu informaci√≥n de manera clara pero sin formato markdown
‚Ä¢ Usa espacios y saltos de l√≠nea para organizar la informaci√≥n

√ÅREAS DE EXPERTISE:
‚Ä¢ Salud y enfermedades de colmenas (Varroa, Nosema, Loque, etc.)
‚Ä¢ Manejo estacional y cuidados espec√≠ficos por temporada
‚Ä¢ Equipos y herramientas ap√≠colas
‚Ä¢ T√©cnicas de inspecci√≥n y mantenimiento
‚Ä¢ Alimentaci√≥n y nutrici√≥n de abejas
‚Ä¢ Producci√≥n y extracci√≥n de miel
‚Ä¢ Soluci√≥n de problemas comunes
‚Ä¢ Recomendaciones preventivas

ESTILO DE RESPUESTA SEG√öN EL TEMA:
‚Ä¢ Para problemas: Diagn√≥stico claro + soluciones paso a paso
‚Ä¢ Para recomendaciones: Consejos pr√°cticos con justificaci√≥n
‚Ä¢ Para equipos: Especificaciones + cu√°ndo y c√≥mo usar
‚Ä¢ Para temporadas: Calendario de actividades + preparativos
‚Ä¢ Para principiantes: Explicaciones simples + tips b√°sicos
‚Ä¢ Para expertos: Detalles t√©cnicos + t√©cnicas avanzadas`;

const SYSTEM_PROMPT_ESTADISTICAS = `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN DATOS Y ESTAD√çSTICAS:
‚Ä¢ Interpreta datos de producci√≥n, salud de colmenas y m√©tricas ap√≠colas
‚Ä¢ Relaciona las cifras con la salud de las colmenas y calidad de la miel
‚Ä¢ Identifica tendencias, patrones y anomal√≠as en los datos
‚Ä¢ Convierte n√∫meros en insights pr√°cticos para el apicultor
‚Ä¢ Sugiere acciones correctivas basadas en an√°lisis de datos

ESTRUCTURA OBLIGATORIA PARA ESTAD√çSTICAS:
1. Saludo con "¬°Bzzz!" y contexto de los datos
2. An√°lisis principal con interpretaci√≥n ap√≠cola
3. Identificaci√≥n de patrones importantes
4. Secci√≥n "CONCLUSIONES CLAVE:" con 2-3 puntos sobre:
   - Estado general del apiario
   - √Åreas que requieren atenci√≥n
   - Recomendaciones espec√≠ficas basadas en datos

OBLIGATORIO: Para consultas sobre estad√≠sticas, datos o m√©tricas, DEBES usar la funci√≥n combineEstadisticas.`;

// ‚úÖ PROMPTS ESPECIALIZADOS POR TIPO DE CONSULTA
const PROMPTS_ESPECIALIZADOS = {
  recomendaciones: `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN RECOMENDACIONES:
‚Ä¢ Proporciona consejos pr√°cticos y espec√≠ficos
‚Ä¢ Considera la experiencia del usuario (principiante/intermedio/avanzado)
‚Ä¢ Incluye cronogramas y calendarios cuando sea apropiado
‚Ä¢ Explica el "por qu√©" detr√°s de cada recomendaci√≥n
‚Ä¢ Ofrece alternativas seg√∫n recursos disponibles

ESTRUCTURA PARA RECOMENDACIONES:
1. Saludo personalizado con "¬°Bzzz!"
2. Recomendaciones principales numeradas claramente
3. Explicaci√≥n del beneficio de cada recomendaci√≥n
4. Tips adicionales o consideraciones especiales
5. "RECUERDA:" con punto clave final`,

  problemas: `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN DIAGN√ìSTICO Y SOLUCI√ìN DE PROBLEMAS:
‚Ä¢ Diagn√≥stica problemas bas√°ndote en s√≠ntomas descritos
‚Ä¢ Ofrece soluciones paso a paso y prioriza por urgencia
‚Ä¢ Incluye medidas preventivas para evitar recurrencia
‚Ä¢ Diferencia entre problemas menores y emergencias
‚Ä¢ Sugiere cu√°ndo buscar ayuda profesional

ESTRUCTURA PARA PROBLEMAS:
1. Saludo emp√°tico con "¬°Bzzz!"
2. Diagn√≥stico probable basado en s√≠ntomas
3. Plan de acci√≥n inmediato (URGENTE si aplica)
4. Pasos de tratamiento detallados
5. "PREVENCI√ìN:" con medidas para evitar el problema`,

  cuidados: `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN CUIDADOS Y MANTENIMIENTO:
‚Ä¢ Detalla rutinas de cuidado por temporada
‚Ä¢ Explica t√©cnicas de inspecci√≥n y mantenimiento
‚Ä¢ Incluye cronogramas y frecuencias recomendadas
‚Ä¢ Aborda alimentaci√≥n, limpieza y preparaci√≥n estacional
‚Ä¢ Considera diferentes tipos de colmenas y equipos

ESTRUCTURA PARA CUIDADOS:
1. Saludo motivacional con "¬°Bzzz!"
2. Cuidados esenciales por prioridad
3. Cronograma o frecuencia recomendada
4. T√©cnicas espec√≠ficas paso a paso
5. "IMPORTANTE:" con recordatorios cr√≠ticos`,

  equipos: `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN EQUIPOS Y HERRAMIENTAS:
‚Ä¢ Recomienda equipos seg√∫n necesidades y presupuesto
‚Ä¢ Explica uso correcto y mantenimiento de herramientas
‚Ä¢ Compara opciones disponibles en el mercado
‚Ä¢ Incluye tips de seguridad y durabilidad
‚Ä¢ Sugiere alternativas caseras cuando sea apropiado

ESTRUCTURA PARA EQUIPOS:
1. Saludo t√©cnico con "¬°Bzzz!"
2. Equipos recomendados por categor√≠a/prioridad
3. Especificaciones y caracter√≠sticas importantes
4. Consejos de uso y mantenimiento
5. "INVERSI√ìN INTELIGENTE:" con tips de compra`,

  temporadas: `${SYSTEM_PROMPT_BASE}

ESPECIALIZACI√ìN EN MANEJO ESTACIONAL:
‚Ä¢ Proporciona calendarios ap√≠colas detallados
‚Ä¢ Explica cambios en comportamiento de abejas por temporada
‚Ä¢ Incluye preparativos espec√≠ficos para cada estaci√≥n
‚Ä¢ Considera variaciones clim√°ticas regionales
‚Ä¢ Planifica actividades con anticipaci√≥n apropiada

ESTRUCTURA PARA TEMPORADAS:
1. Saludo estacional con "¬°Bzzz!"
2. Caracter√≠sticas de la temporada actual/consultada
3. Actividades prioritarias del per√≠odo
4. Preparativos para la siguiente temporada
5. "CALENDARIO:" con fechas clave a recordar`
};

app.post('/api/message', async (req, res) => {
  try {
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: 'Cuerpo de solicitud inv√°lido' });
    }
    
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({
        error: '¬°Bzzz! üêù Necesito que me digas qu√© quieres saber sobre nuestras colmenas. Puedo ayudarte con estad√≠sticas, recomendaciones, problemas, cuidados, equipos o cualquier duda ap√≠cola.',
      });
    }
    
    // ‚úÖ NUEVA L√ìGICA: Detectar tipo de consulta
    const consultaInfo = detectarTipoConsulta(message);
    const { tipo, requiere_funcion } = consultaInfo;
    
    // Seleccionar el prompt apropiado
    let systemPrompt;
    if (requiere_funcion && tipo === 'estadisticas') {
      systemPrompt = SYSTEM_PROMPT_ESTADISTICAS;
    } else if (PROMPTS_ESPECIALIZADOS[tipo]) {
      systemPrompt = PROMPTS_ESPECIALIZADOS[tipo];
    } else {
      systemPrompt = SYSTEM_PROMPT_BASE;
    }
    
    console.log(`üêõ DEBUG - Tipo de consulta: ${tipo}`);
    console.log(`üêõ DEBUG - Requiere funci√≥n: ${requiere_funcion}`);
    console.log(`üêõ DEBUG - Prompt seleccionado: ${tipo === 'estadisticas' && requiere_funcion ? 'ESTADISTICAS' : tipo.toUpperCase() || 'BASE'}`);
    
    // Preparar par√°metros para OpenAI
    const completionParams = {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        { role: 'user', content: message },
      ],
      temperature: 0.7,
    };

    // ‚úÖ Agregar tools solo si es necesario
    if (tools && tools.length > 0 && requiere_funcion) {
      completionParams.tools = tools;
      
      if (tipo === 'estadisticas') {
        completionParams.tool_choice = {
          type: "function",
          function: { name: "combineEstadisticas" }
        };
        console.log(`üêõ DEBUG - Forzando tool_choice: combineEstadisticas`);
      } else {
        completionParams.tool_choice = 'auto';
      }
    }
    
    console.log(`üêõ DEBUG - Configuraci√≥n final:`, {
      tipo_consulta: tipo,
      usar_tools: !!completionParams.tools,
      tool_choice: completionParams.tool_choice || 'none'
    });
    
    // Primera solicitud al modelo
    const completion = await openai.chat.completions.create(completionParams);
    const responseMessage = completion.choices[0].message;
    
    console.log(`üêõ DEBUG - Respuesta del modelo:`, {
      has_tool_calls: !!responseMessage.tool_calls,
      tool_calls_count: responseMessage.tool_calls?.length || 0,
      finish_reason: completion.choices[0].finish_reason
    });
    
    // Procesar tool calls si existen
    if (responseMessage.tool_calls && responseMessage.tool_calls.length > 0) {
      const toolCall = responseMessage.tool_calls[0];
      
      console.log(`üêù INFO - Tool call ejecutado:`, {
        name: toolCall.function.name,
        id: toolCall.id
      });
      
      if (toolCall.function.name === 'combineEstadisticas') {
        try {
          console.log(`üêù INFO - Obteniendo estad√≠sticas...`);
          const estadisticas = await combineEstadisticas();
          
          // Segunda solicitud con los datos
          const followUpCompletion = await openai.chat.completions.create({
            model: 'deepseek-chat',
            messages: [
              {
                role: 'system',
                content: `${SYSTEM_PROMPT_ESTADISTICAS}

CONTEXTO ADICIONAL PARA ESTA RESPUESTA:
‚Ä¢ El usuario hizo una consulta de tipo: ${tipo}
‚Ä¢ Los datos que recibir√°s son estad√≠sticas reales y actualizadas
‚Ä¢ Enf√≥cate en proporcionar insights valiosos y accionables
‚Ä¢ Relaciona siempre los n√∫meros con la salud y productividad del apiario`
              },
              { role: 'user', content: message },
              responseMessage,
              {
                role: 'tool',
                tool_call_id: toolCall.id,
                name: toolCall.function.name,
                content: JSON.stringify(estadisticas),
              },
            ],
            temperature: 0.6,
          });
          
          let respuestaLimpia = eliminarMarkdown(followUpCompletion.choices[0].message.content);
                
          res.json({
            response: respuestaLimpia,
            data: estadisticas.data,
            status: 'success',
            tipo_consulta: tipo,
            timestamp: new Date().toISOString(),
            version: 'v2.1_enhanced',
            debug: {
              tool_used: true,
              tool_name: toolCall.function.name,
              query_type: tipo,
              data_count: estadisticas.data?.length || 0
            }
          });
          
        } catch (error) {
          console.error('‚ùå ERROR al ejecutar combineEstadisticas:', error);
          
          let errorMsg = `¬°Bzzz! üêù Ups, hubo un problemita en el panal al obtener los datos de ${tipo}. `;
          
          if (error.message.includes('API_ESTADISTICA')) {
            errorMsg += 'El servidor de estad√≠sticas no responde. üîß';
          } else if (error.message.includes('TOKEN')) {
            errorMsg += 'Problema de autenticaci√≥n con el servidor. üîë';
          } else {
            errorMsg += `Error: ${error.message} üçØ`;
          }
          
          res.status(500).json({
            error: errorMsg,
            tipo_consulta: tipo,
            debug: process.env.NODE_ENV === 'development' ? {
              error_message: error.message,
              query_type: tipo
            } : undefined
          });
        }
      }
    } else {
      // Respuesta directa sin tool calling
      let respuestaLimpia = eliminarMarkdown(responseMessage.content);
      
      res.json({
        response: respuestaLimpia,
        status: 'success',
        tipo_consulta: tipo,
        timestamp: new Date().toISOString(),
        version: 'v2.1_enhanced',
        debug: {
          tool_used: false,
          query_type: tipo,
          direct_response: true
        }
      });
    }
  } catch (error) {
    console.error('‚ùå ERROR general:', error);
    
    let errorMessage = '¬°Bzzz! üêù Algo sali√≥ mal en el panal. ';
    
    if (error.code === 'ECONNREFUSED') {
      errorMessage += 'No puedo conectarme con los sistemas. üîå';
    } else if (error.status === 429) {
      errorMessage += 'Las abejas est√°n muy ocupadas ahora. ‚è∞';
    } else if (error.status >= 500) {
      errorMessage += 'Hay un problema t√©cnico en el colmenar. üîß';
    } else {
      errorMessage += 'Error t√©cnico inesperado. üêõ';
    }
    
    errorMessage += ' ¬°Int√©ntalo de nuevo en un momento! üçØ';
    
    res.status(500).json({
      error: errorMessage,
      debug: process.env.NODE_ENV === 'development' ? {
        error_message: error.message,
        error_code: error.code,
        error_status: error.status
      } : undefined
    });
  }
});

// ‚úÖ ENDPOINTS DE DEBUG MEJORADOS
app.get('/debug/config', (req, res) => {
  res.json({
    api_configured: !!process.env.API_ESTADISTICA,
    token_configured: !!process.env.TOKEN,
    deepseek_configured: !!process.env.DEEPSEEK_API_KEY,
    tools_available: tools?.length || 0,
    tools_list: tools?.map(t => t.function.name) || [],
    prompts_available: Object.keys(PROMPTS_ESPECIALIZADOS).length + 2, // +2 por base y estadisticas
    api_version: 'v2.1_enhanced',
    node_env: process.env.NODE_ENV || 'development'
  });
});

app.post('/debug/test-detection', (req, res) => {
  const { message } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: 'Mensaje requerido' });
  }
  
  const consultaInfo = detectarTipoConsulta(message);
  
  res.json({
    message: message,
    detected_type: consultaInfo.tipo,
    requires_function: consultaInfo.requiere_funcion,
    word_matches: consultaInfo.coincidencias,
    would_use_specialized_prompt: !!PROMPTS_ESPECIALIZADOS[consultaInfo.tipo],
    timestamp: new Date().toISOString()
  });
});

// Endpoint para probar diferentes tipos de consulta
app.get('/debug/query-types', (req, res) => {
  const tiposEjemplo = {
    estadisticas: ["mu√©strame las estad√≠sticas", "datos de producci√≥n", "cu√°nto produjeron las colmenas"],
    recomendaciones: ["qu√© me recomiendas", "dame consejos", "c√≥mo puedo mejorar"],
    problemas: ["mis abejas est√°n muriendo", "problema con varroa", "colmena d√©bil"],
    cuidados: ["c√≥mo cuidar las colmenas", "mantenimiento de primavera", "alimentaci√≥n"],
    equipos: ["qu√© equipos necesito", "mejor ahumador", "herramientas b√°sicas"],
    temporadas: ["cuidados de invierno", "preparaci√≥n primavera", "cosecha verano"],
    general: ["hola", "buenos d√≠as", "gracias por tu ayuda"]
  };
  
  res.json({
    available_query_types: Object.keys(tiposEjemplo),
    examples: tiposEjemplo,
    specialized_prompts: Object.keys(PROMPTS_ESPECIALIZADOS),
    total_detection_words: Object.values(PROMPTS_ESPECIALIZADOS).length * 15, // Estimado
    version: 'v2.1_enhanced'
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: 'v2.1_enhanced',
    api_type: 'multi_domain_tools',
    query_types_supported: ['estadisticas', 'recomendaciones', 'problemas', 'cuidados', 'equipos', 'temporadas', 'general'],
    uptime: process.uptime()
  });
});

app.listen(port, () => {
  console.log(`üêù Servidor Meli MEJORADO funcionando en http://localhost:${port}`);
  console.log(`üîß API Version: v2.1 Enhanced (Multi-Domain)`);
  console.log(`üéØ Tipos de consulta soportados:`);
  console.log(`   - Estad√≠sticas (con funci√≥n)`);
  console.log(`   - Recomendaciones`);
  console.log(`   - Problemas y diagn√≥sticos`);
  console.log(`   - Cuidados y mantenimiento`);
  console.log(`   - Equipos y herramientas`);
  console.log(`   - Manejo estacional`);
  console.log(`   - Consultas generales`);
  console.log(`üêõ DEBUG - Endpoints disponibles:`);
  console.log(`   - POST /api/message (principal mejorado)`);
  console.log(`   - GET /debug/config (configuraci√≥n)`);
  console.log(`   - POST /debug/test-detection (probar detecci√≥n)`);
  console.log(`   - GET /debug/query-types (tipos disponibles)`);
  console.log(`   - GET /health (estado del servidor)`);
  console.log(`üõ†  Prompts especializados: ${Object.keys(PROMPTS_ESPECIALIZADOS).length + 2}`);
  
  // Verificar configuraci√≥n
  const missingVars = [];
  if (!process.env.DEEPSEEK_API_KEY) missingVars.push('DEEPSEEK_API_KEY');
  if (!process.env.API_ESTADISTICA) missingVars.push('API_ESTADISTICA');
  if (!process.env.TOKEN) missingVars.push('TOKEN');
  
  if (missingVars.length > 0) {
    console.log(`‚ö†Ô∏è  Variables faltantes: ${missingVars.join(', ')}`);
  } else {
    console.log(`‚úÖ Sistema completamente configurado - Meli lista para todo tipo de consultas ap√≠colas`);
  }
});