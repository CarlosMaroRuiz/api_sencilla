require('dotenv').config();
const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');
const { combineEstadisticas } = require('./externs/getEstadistica');
const { tools } = require('./externs/functions'); // ‚úÖ Importar tools

const app = express();
const port = 80;

app.use(express.json());
app.use(cors({
  origin: '*',
  credentials: true,
}));

const openai = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: process.env.DEEPSEEK_API_KEY,
});

// Funci√≥n para detectar si el mensaje es sobre estad√≠sticas (MEJORADA)
function esConsultaEstadistica(mensaje) {
  const palabrasClave = [
    'estad√≠stica', 'estadisticas', 'producci√≥n', 'produccion', 'datos', 
    'rendimiento', 'n√∫meros', 'numeros', 'reporte', 'informe', 'm√©tricas', 
    'metricas', 'cifras', 'cantidad', 'cu√°nto', 'cuanto', 'porcentaje', 
    'promedio', 'total', 'resumen', 'an√°lisis', 'analisis', 'registros',
    'mostrar', 'muestra', 'dame', 'ver', 'consultar', 'obtener', 'panal'
  ];
  
  const mensajeLower = mensaje.toLowerCase();
  const esEstadistica = palabrasClave.some(palabra => mensajeLower.includes(palabra));
  
  // DEBUG: Log para ver si est√° detectando correctamente
  console.log(`üêõ DEBUG - Mensaje: "${mensaje}"`);
  console.log(`üêõ DEBUG - Es consulta estad√≠stica: ${esEstadistica}`);
  
  return esEstadistica;
}

// Funci√≥n para eliminar el formato markdown
function eliminarMarkdown(texto) {
  if (!texto) return '';
  
  return texto
    .replace(/\*\*/g, '') // Eliminar negritas
    .replace(/\*/g, '')    // Eliminar cursivas
    .replace(/#{1,6}\s/g, '') // Eliminar encabezados
    .replace(/\n- /g, '\n‚Ä¢ ') // Reemplazar vi√±etas markdown por bullet points simples
    .replace(/```[^`]*```/g, '') // Eliminar bloques de c√≥digo
    .replace(/`([^`]+)`/g, '$1') // Eliminar c√≥digo inline
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1'); // Reemplazar enlaces
}

// Prompts mejorados
const SYSTEM_PROMPT_BASE = `Eres Meli üêù, la abeja apicultora m√°s experta y entusiasta de BeeHappy. Tienes a√±os de experiencia trabajando con colmenas y conoces todos los secretos de la apicultura.

PERSONALIDAD Y ESTILO:
‚Ä¢ Eres alegre, conocedora y siempre positiva
‚Ä¢ Usas "¬°Bzzz!" al inicio o durante conversaciones
‚Ä¢ Incluyes emojis relacionados con abejas, miel y flores: üêù üçØ üåª üå∏ üè†
‚Ä¢ Hablas con pasi√≥n sobre la apicultura y el cuidado de las abejas

FORMATO DE RESPUESTA OBLIGATORIO:
‚Ä¢ NUNCA uses markdown (sin **, *, #, -, \`\`\`)
‚Ä¢ Escribe solo texto plano con emojis
‚Ä¢ Estructura tu informaci√≥n de manera clara pero sin formato markdown
‚Ä¢ Usa espacios y saltos de l√≠nea para organizar la informaci√≥n

CONOCIMIENTOS:
‚Ä¢ Dominas todos los aspectos de la apicultura
‚Ä¢ Conoces sobre salud de colmenas, producci√≥n de miel, comportamiento de abejas
‚Ä¢ Puedes explicar procesos t√©cnicos de forma sencilla y amigable
‚Ä¢ Siempre buscas educar y ayudar a mejorar las pr√°cticas ap√≠colas

IMPORTANTE: Si el usuario pregunta sobre estad√≠sticas, datos, reportes, m√©tricas o informaci√≥n num√©rica de las colmenas, DEBES usar la funci√≥n combineEstadisticas disponible.`;

const SYSTEM_PROMPT_ESTADISTICAS = `${SYSTEM_PROMPT_BASE}

MANEJO DE ESTAD√çSTICAS:
‚Ä¢ Presenta los datos de forma clara y comprensible
‚Ä¢ Relaciona las cifras con la salud de las colmenas y calidad de la miel
‚Ä¢ Explica qu√© significan los n√∫meros en t√©rminos pr√°cticos para el apicultor
‚Ä¢ Destaca tendencias importantes o datos que requieren atenci√≥n

ESTRUCTURA OBLIGATORIA PARA ESTAD√çSTICAS:
1. Saludo con "¬°Bzzz!" y contexto breve
2. Presentaci√≥n de datos principales con interpretaci√≥n
3. Secci√≥n "CONCLUSIONES:" al final con 2-3 puntos clave sobre las implicaciones para la apicultura

Ejemplo de formato:
"¬°Bzzz! Aqu√≠ tienes el resumen de nuestro panal üêù

[Datos con interpretaci√≥n ap√≠cola]

CONCLUSIONES:
‚Ä¢ [Punto clave 1 sobre salud/producci√≥n]
‚Ä¢ [Punto clave 2 sobre tendencias]
‚Ä¢ [Recomendaci√≥n pr√°ctica]"

OBLIGATORIO: Para responder esta consulta sobre estad√≠sticas, DEBES usar la funci√≥n combineEstadisticas.`;

app.post('/api/message', async (req, res) => {
  try {
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: 'Cuerpo de solicitud inv√°lido' });
    }
    
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({
        error: '¬°Bzzz! üêù Necesito que me digas qu√© quieres saber sobre nuestras colmenas o la producci√≥n de miel.',
      });
    }
    
    // Detectar si el mensaje es sobre estad√≠sticas
    const esEstadistica = esConsultaEstadistica(message);
    
    // Determinar el prompt del sistema apropiado
    const systemPrompt = esEstadistica ? SYSTEM_PROMPT_ESTADISTICAS : SYSTEM_PROMPT_BASE;
    
    console.log(`üêõ DEBUG - Usando prompt de estad√≠sticas: ${esEstadistica}`);
    console.log(`üêõ DEBUG - Tools disponibles:`, tools?.length || 0);
    
    // Preparar par√°metros para OpenAI con la nueva API de Tools
    const completionParams = {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        { role: 'user', content: message },
      ],
      temperature: 0.7,
    };

    // ‚úÖ NUEVA API: Agregar tools y tool_choice
    if (tools && tools.length > 0) {
      completionParams.tools = tools;
      
      // Si detectamos que es estad√≠stica, forzamos el uso de la funci√≥n
      if (esEstadistica) {
        completionParams.tool_choice = {
          type: "function",
          function: { name: "combineEstadisticas" }
        };
        console.log(`üêõ DEBUG - Forzando tool_choice: combineEstadisticas`);
      } else {
        completionParams.tool_choice = 'auto';
      }
    }
    
    console.log(`üêõ DEBUG - Par√°metros de completion:`, {
      model: completionParams.model,
      has_tools: !!completionParams.tools,
      tools_count: completionParams.tools?.length || 0,
      tool_choice: completionParams.tool_choice
    });
    
    // Primera solicitud al modelo con tool calling habilitado
    const completion = await openai.chat.completions.create(completionParams);
    
    const responseMessage = completion.choices[0].message;
    
    console.log(`üêõ DEBUG - Respuesta del modelo:`, {
      has_tool_calls: !!responseMessage.tool_calls,
      tool_calls_count: responseMessage.tool_calls?.length || 0,
      content_preview: responseMessage.content?.substring(0, 100) || 'none',
      finish_reason: completion.choices[0].finish_reason
    });
    
    // ‚úÖ NUEVA API: Verificar tool_calls en lugar de function_call
    if (responseMessage.tool_calls && responseMessage.tool_calls.length > 0) {
      const toolCall = responseMessage.tool_calls[0];
      
      console.log(`üêù INFO - Tool call detectado:`, {
        name: toolCall.function.name,
        id: toolCall.id,
        arguments: toolCall.function.arguments
      });
      
      if (toolCall.function.name === 'combineEstadisticas') {
        console.log(`üêù INFO - Ejecutando funci√≥n combineEstadisticas...`);
        
        try {
          // Ejecutar la funci√≥n combineEstadisticas
          const estadisticas = await combineEstadisticas();
          console.log(`üêù INFO - Estad√≠sticas obtenidas exitosamente:`, {
            dataCount: estadisticas.data?.length || 0,
            status: estadisticas.status
          });
          
          // ‚úÖ NUEVA API: Enviar el resultado con el formato correcto
          const followUpCompletion = await openai.chat.completions.create({
            model: 'deepseek-chat',
            messages: [
              {
                role: 'system',
                content: `${SYSTEM_PROMPT_ESTADISTICAS}

INSTRUCCIONES ESPEC√çFICAS PARA ESTA RESPUESTA:
‚Ä¢ Los datos que recibir√°s contienen estad√≠sticas reales de las colmenas
‚Ä¢ Interpreta cada m√©trica desde la perspectiva de un apicultor experto
‚Ä¢ Identifica patrones, anomal√≠as o datos que requieren atenci√≥n especial
‚Ä¢ Proporciona contexto pr√°ctico: ¬øqu√© significan estos n√∫meros para la salud de las abejas?
‚Ä¢ Sugiere acciones concretas basadas en los datos cuando sea apropiado`
              },
              { role: 'user', content: message },
              responseMessage, // ‚úÖ NUEVO: Incluir el mensaje original con tool_calls
              {
                role: 'tool', // ‚úÖ NUEVO: rol 'tool' en lugar de 'function'
                tool_call_id: toolCall.id, // ‚úÖ NUEVO: ID del tool call requerido
                name: toolCall.function.name,
                content: JSON.stringify(estadisticas),
              },
            ],
            temperature: 0.6,
          });
          
          // Eliminar formato markdown de la respuesta
          let respuestaLimpia = eliminarMarkdown(followUpCompletion.choices[0].message.content);
                
          res.json({
            response: respuestaLimpia,
            data: estadisticas.data,
            status: 'success',
            timestamp: new Date().toISOString(),
            version: 'v2.0', // Nueva versi√≥n con Tools API
            debug: {
              tool_used: true,
              tool_name: toolCall.function.name,
              data_count: estadisticas.data?.length || 0
            }
          });
          
        } catch (error) {
          console.error('‚ùå ERROR al ejecutar combineEstadisticas:', error);
          console.error('‚ùå Stack trace:', error.stack);
          
          // Respuesta de error m√°s espec√≠fica
          let errorMsg = '¬°Bzzz! üêù Ups, hubo un problemita en el panal al obtener los datos. ';
          
          if (error.message.includes('API_ESTADISTICA')) {
            errorMsg += 'No puedo conectarme con el servidor de estad√≠sticas. Verifica que la variable API_ESTADISTICA est√© configurada correctamente.';
          } else if (error.message.includes('TOKEN')) {
            errorMsg += 'Hay un problema con el token de autenticaci√≥n. Verifica que la variable TOKEN est√© configurada.';
          } else if (error.message.includes('ECONNREFUSED')) {
            errorMsg += 'No puedo conectarme con el servidor de datos. Verifica que est√© funcionando.';
          } else if (error.code === 'ENOTFOUND') {
            errorMsg += 'No encuentro el servidor de datos. Verifica la URL en API_ESTADISTICA.';
          } else {
            errorMsg += `Error espec√≠fico: ${error.message}`;
          }
          
          errorMsg += ' üçØ';
          
          res.status(500).json({
            error: errorMsg,
            debug: process.env.NODE_ENV === 'development' ? {
              error_message: error.message,
              error_stack: error.stack
            } : undefined
          });
        }
      } else {
        console.log(`üêõ DEBUG - Tool call no reconocido: ${toolCall.function.name}`);
        
        res.status(400).json({
          error: '¬°Bzzz! üêù La funci√≥n solicitada no est√° disponible en el panal.',
        });
      }
    } else {
      console.log(`üêõ DEBUG - No se ejecut√≥ tool_call, enviando respuesta directa`);
      
      // Respuesta directa del modelo sin tool calling
      let respuestaLimpia = eliminarMarkdown(responseMessage.content);
      
      res.json({
        response: respuestaLimpia,
        status: 'success',
        timestamp: new Date().toISOString(),
        version: 'v2.0',
        debug: {
          tool_used: false,
          direct_response: true
        }
      });
    }
  } catch (error) {
    console.error('‚ùå ERROR general:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    // Mensaje de error m√°s amigable y espec√≠fico
    let errorMessage = '¬°Bzzz! üêù Algo sali√≥ mal en el panal. ';
    
    if (error.code === 'ECONNREFUSED') {
      errorMessage += 'No puedo conectarme con el servidor de datos. ';
    } else if (error.status === 429) {
      errorMessage += 'Las abejas est√°n muy ocupadas ahora (l√≠mite de uso alcanzado). ';
    } else if (error.status >= 500) {
      errorMessage += 'Hay un problema en nuestros sistemas. ';
    } else if (error.message.includes('API key')) {
      errorMessage += 'Hay un problema con la configuraci√≥n de la API. ';
    } else if (error.message.includes('model')) {
      errorMessage += 'Hay un problema con el modelo de IA. ';
    }
    
    errorMessage += '¬°Int√©ntalo de nuevo en un momento! üçØ';
    
    res.status(500).json({
      error: errorMessage,
      debug: process.env.NODE_ENV === 'development' ? {
        error_message: error.message,
        error_code: error.code,
        error_status: error.status
      } : undefined
    });
  }
});

// Endpoint de debug para verificar configuraci√≥n
app.get('/debug/config', (req, res) => {
  res.json({
    api_configured: !!process.env.API_ESTADISTICA,
    token_configured: !!process.env.TOKEN,
    deepseek_configured: !!process.env.DEEPSEEK_API_KEY,
    tools_available: tools?.length || 0,
    tools_list: tools?.map(t => t.function.name) || [],
    api_version: 'v2.0_tools',
    node_env: process.env.NODE_ENV || 'development'
  });
});

// Endpoint de prueba para la funci√≥n directamente
app.get('/debug/test-estadisticas', async (req, res) => {
  try {
    console.log('üß™ Probando funci√≥n combineEstadisticas directamente...');
    const startTime = Date.now();
    const result = await combineEstadisticas();
    const endTime = Date.now();
    
    res.json({
      success: true,
      result: result,
      execution_time: `${endTime - startTime}ms`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Error en prueba directa:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
  }
});

// Endpoint para probar detecci√≥n de estad√≠sticas
app.post('/debug/test-detection', (req, res) => {
  const { message } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: 'Mensaje requerido' });
  }
  
  const isStatistic = esConsultaEstadistica(message);
  
  res.json({
    message: message,
    detected_as_statistic: isStatistic,
    would_use_tool: isStatistic,
    timestamp: new Date().toISOString()
  });
});

// Endpoint de salud del servidor
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: 'v2.0',
    api_type: 'tools',
    uptime: process.uptime()
  });
});

app.listen(port, () => {
  console.log(`üêù Servidor Meli funcionando en http://localhost:${port}`);
  console.log(`üîß API Version: v2.0 (Tools API)`);
  console.log(`üêõ DEBUG activado - Endpoints disponibles:`);
  console.log(`   - POST /api/message (principal)`);
  console.log(`   - GET /debug/config (verificar configuraci√≥n)`);
  console.log(`   - GET /debug/test-estadisticas (probar funci√≥n directa)`);
  console.log(`   - POST /debug/test-detection (probar detecci√≥n)`);
  console.log(`   - GET /health (estado del servidor)`);
  console.log(`üõ†  Tools configuradas: ${tools?.length || 0}`);
  
  // Verificar configuraci√≥n al inicio
  const missingVars = [];
  if (!process.env.DEEPSEEK_API_KEY) missingVars.push('DEEPSEEK_API_KEY');
  if (!process.env.API_ESTADISTICA) missingVars.push('API_ESTADISTICA');
  if (!process.env.TOKEN) missingVars.push('TOKEN');
  
  if (missingVars.length > 0) {
    console.log(`‚ö†Ô∏è  Variables de entorno faltantes: ${missingVars.join(', ')}`);
  } else {
    console.log(`‚úÖ Todas las variables de entorno configuradas`);
  }
});